// vi·∫øt contract trong cosmwasm gi·ªëng nh∆∞ ki·ªÉu Proxy pattern

#[cfg(not(feature = "library"))] // ch·ªâ d·ªãch file n√†y khi n√≥ ƒë∆∞·ª£c chay nh∆∞ m·ªôt th∆∞ vi·ªán
// =>  M·ª•c ƒë√≠ch: Ch·ªâ import entry_point khi contract ƒëang ch·∫°y ƒë·ªôc l·∫≠p, kh√¥ng ph·∫£i l√† m·ªôt th∆∞ vi·ªán.
// #[cfg(...)] l√† attribute ki·ªÉm so√°t bi√™n d·ªãch (conditional compilation) trong Rust.
// not(feature = "library") nghƒ©a l√† ch·ªâ ch·∫°y ƒëo·∫°n code n√†y n·∫øu kh√¥ng b·∫≠t feature "library".
use cosmwasm_std::{entry_point, Addr};
// ƒê·ªãnh nghƒ©a ƒëi·ªÉm v√†o
// entry_point l√† macro gi√∫p x√°c ƒë·ªãnh c√°c h√†m ch√≠nh c·ªßa contract khi deploy

use cosmwasm_std::{
    to_binary, Binary, Deps, DepsMut, Env, MessageInfo, Order, Response, StdResult,
};
// c√°c struct / enum c·ªßa cosmwasm_std
// ‚úÖ Binary ‚Üí D·ªØ li·ªáu nh·ªã ph√¢n (th∆∞·ªùng d√πng cho query). l√† wrapper c·ªßa Vec<u8>
// ‚úÖ Deps & DepsMut ‚Üí Truy c·∫≠p storage & dependencies. ƒê·ªçc ghi d·ªØ li·ªáu v√†o storage
// ‚úÖ Env ‚Üí L·∫•y th√¥ng tin blockchain (block height, contract address).
// ‚úÖ MessageInfo ‚Üí L·∫•y th√¥ng tin ng∆∞·ªùi g·ª≠i transaction & token ƒë√≠nh k√®m.
// ‚úÖ Response ‚Üí Tr·∫£ v·ªÅ k·∫øt qu·∫£ sau khi th·ª±c thi, thay ƒë·ªëi state contract. Ch·ª©a log,message,event => ghi l·∫°i event sau khi transaction th·ª±c hi·ªán -> EVENT
// ‚úÖ StdResult ‚Üí K·∫øt qu·∫£ th·ª±c thi (Ok(T) ho·∫∑c Err(StdError)). = Result<T, StdError>
//to_binary l√† m·ªôt h√†m h·ªó tr·ª£ (helper function) gi√∫p m√£ h√≥a c√°c ki·ªÉu d·ªØ li·ªáu (Struct, String, Vec, ...) th√†nh Binary

// pub struct DepsMut<'a> {
//     pub api: &'a dyn Api,         // G·ªçi API (v√≠ d·ª•: x√°c th·ª±c ƒë·ªãa ch·ªâ)
//     pub storage: &'a mut dyn Storage, // Truy c·∫≠p storage (c√≥ th·ªÉ ghi)
//     pub querier: &'a dyn Querier,  // Truy v·∫•n d·ªØ li·ªáu t·ª´ blockchain
// }

use cw2::set_contract_version;
//H√†m h·ªó tr·ª£ l∆∞u tr·ªØ contract version
// => d·ªÖ d√†ng theo d√µi v√† n√¢ng c·∫•p
//set_contract_version(storage, contract_name, contract_version)

//Bonus: &mut dyn Storage l√† m·ªôt trait object ƒë·∫°i di·ªán cho b·ªô nh·ªõ l∆∞u tr·ªØ (storage) c·ªßa smart contract.
// pub trait Storage {
//     fn get(&self, key: &[u8]) -> Option<Vec<u8>>;
//     fn set(&mut self, key: &[u8], value: &[u8]);
//     fn remove(&mut self, key: &[u8]);
// }

use crate::error::ContractError;
//crate -> tham chi·∫øu ƒë·∫øn g·ªëc c·ªßa project
// error t·ª± ƒë·ªãnh nghƒ©a

use crate::msg::{
    AllPollsResponse, ExecuteMsg, InstantiateMsg, MigrateMsg, PollResponse, QueryMsg, VoteResponse,
};

use crate::state::{Ballot, Config, Poll, BALLOTS, CONFIG, POLLS};

const CONTRACT_NAME: &str = "crates.io:cw-starter";
const CONTRACT_VERSION: &str = env!("CARGO_PKG_VERSION");

#[cfg_attr(not(feature = "library"), entry_point)] // l√† entry_point n·∫øu file ƒë∆∞·ª£c ch·∫°y kh√¥ng nh∆∞ m·ªôt lib
                                                   // => x√°c ƒë·ªãnh g·ªëc file, file contract ch√≠nh s·∫Ω th·ª±c thi
                                                   // D√≤ng #[cfg_attr(not(feature = "library"), entry_point)] c√≥ t√°c d·ª•ng nh∆∞ sau:

// #[cfg_attr(...)]: ƒê√¢y l√† m·ªôt attribute ƒëi·ªÅu ki·ªán (conditional attribute).
// not(feature = "library"):
// N·∫øu feature "library" kh√¥ng ƒë∆∞·ª£c b·∫≠t, Rust s·∫Ω √°p d·ª•ng entry_point cho h√†m.
// N·∫øu "library" ƒë∆∞·ª£c b·∫≠t, Rust b·ªè qua entry_point.
// entry_point: ƒê√¢y l√† macro c·ªßa cosmwasm_std, d√πng ƒë·ªÉ x√°c ƒë·ªãnh c√°c h√†m entry point (nh∆∞ instantiate, execute, query, migrate). N√≥ gi√∫p contract ch·∫°y tr√™n blockchain Cosmos.
// üëâ M·ª•c ƒë√≠ch:
// Khi contract ch·∫°y tr√™n blockchain, c·∫ßn entry_point ƒë·ªÉ Cosmos-SDK nh·∫≠n di·ªán h√†m.
// Khi contract ƒë∆∞·ª£c import nh∆∞ m·ªôt th∆∞ vi·ªán (v√≠ d·ª• trong unit test), entry_point kh√¥ng c·∫ßn thi·∫øt.

pub fn instantiate(
    _deps: DepsMut,       //truy c·∫≠p contract storage , c√≥ th·ªÉ thay ƒë·ªïi
    _env: Env, // th√¥ng tin m√¥i tr∆∞·ªùng bao g·ªìm address, block info (chi·ªÅu cao v√† th·ªùi gian) v√† m·ªôt s·ªë transaction info
    _info: MessageInfo, // th√¥ng tin sender, token g·ª≠i k√®m
    _msg: InstantiateMsg, // init data
) -> Result<Response, ContractError> {
    set_contract_version(_deps.storage, CONTRACT_NAME, CONTRACT_VERSION)?; // L∆∞u version v√† t√™n c·ªßa contract

    let admin = _msg.admin.unwrap_or(_info.sender.to_string());
    // theo InstantianMsg trong msg.rs
    // admin l√† string
    // _msg.admin return Options<String>
    // unwrap_or(...) : l·∫•y gi√° tr·ªã b√™n trong Some(value) ~value ·ªü ƒë√¢y l√† ƒë·ªãa ch·ªâ admin~ ho·∫∑c n·∫øu l√† None -> _infor.sender
    //_infor.sender -> ƒë·ªãa ch·ªâ ng∆∞·ªùi g·ªçi contract c√≥ ki·ªÉu Addr
    // N·∫øu gi·∫£i _msg.admin ra None th√¨ l·∫•y admin l√† ng∆∞·ªùi deploy

    ///eprintln!("{}", admin);
    let validated_admin = Addr::unchecked(admin.clone());
    ///let validated_admin = _deps.api.addr_validate(&admin)?;
    // Ki·ªÉm tra v√† x√°c ƒë·ªãnh ƒë·ªãa ch·ªâ admin
    // g·ªçi h√†m addr_validate(&admin) ƒë·ªÉ ki·ªÉm tra admin c√≥ h·ª£p l·ªá kh√¥ng
    // n·∫øu h·ª£p l·ªá tr·∫£ v·ªÅ Addr
    // N·∫øu kh√¥ng h·ª£p l·ªá, tr·∫£ v·ªÅ l·ªói StdError::GenericErr { msg: "invalid address".to_string() }.
    let config = Config {
        admin: validated_admin.clone(),
    };

    CONFIG.save(_deps.storage, &config)?;

    Ok(Response::new()
        .add_attribute("action", "instantiate")
        .add_attribute("admin", validated_admin.to_string()))
    //Tr·∫£ v·ªÅ Reponse ch·ª©a metadata ƒë·ªÉ d·ªÖ d√†ng theo d√µi khi blockchain ƒë∆∞·ª£c kh·ªüi t·∫°o
    // ƒê·ªìng th·ªùi emit event

    //unimplemented!() // marco ƒë√°nh d·∫•u m·ªôt ƒëo·∫°n code ch∆∞a ƒë∆∞·ª£c ho√†n th√†nh -> panic ngay l·∫≠p t·ª©c khi ch·∫°y ch∆∞∆°ng tr√¨nh
}

#[cfg_attr(not(feature = "library"), entry_point)]
pub fn execute(
    // H√†m th·ª±c thi c√°c y√™u c·∫ßu
    _deps: DepsMut,
    _env: Env,
    _info: MessageInfo,
    _msg: ExecuteMsg, // ch·ª©a l·ªánh c·∫ßn th·ª±c thi
) -> Result<Response, ContractError> {
    match _msg {
        ExecuteMsg::CreatePoll {
            poll_id,
            question,
            options,
        } => execute_create_poll(_deps, _env, _info, poll_id, question, options),

        ExecuteMsg::Vote { poll_id, vote } => execute_vote(_deps, _env, _info, poll_id, vote),
    }
    //unimplemented!()
}

fn execute_vote(
    deps: DepsMut,
    _env: Env,
    info: MessageInfo,
    poll_id: String,
    vote: String,
) -> Result<Response, ContractError> {
    let poll = POLLS.may_load(deps.storage, poll_id.clone())?;

    match poll {
        Some(mut poll) => {
            // The poll exists
            BALLOTS.update(
                // update BALLOTS t·∫°i key (info.sender, poll_id)
                deps.storage,
                (info.sender, poll_id.clone()),
                |ballot| -> StdResult<Ballot> {
                    //inline function th·ª±c hi·ªán g√¨ t·∫°i key (info.sender,id)
                    //N·∫øu tr·∫£ v·ªÅ Ok(value) th√¨ update gi√° tr·ªã t·∫°i kh√≥a th√†nh value
                    // tham s·ªë th·ª© 3 l√† closure  nh·∫≠n v√†o 1 para l√† Option<T>, v·ªõi T l√† ki·ªÉu c·ªßa gi√° tr·ªã c·ªßa Map
                    // function F: FnOnce(Option<T>) -> StdResult<T>
                    match ballot {
                        Some(ballot) => {
                            // tr∆∞·ªùng h·ª£p ƒë√£ vote r·ªìi gi·ªù mu·ªën vote l·∫°i
                            // We need to revoke their old vote
                            // Find the position
                            let position_of_old_vote = poll
                                .options
                                .iter()
                                .position(|option| option.0 == ballot.option)
                                .unwrap(); // t√¨m vote trong poll.options m√† t∆∞∆°ng ƒë·ªìng v·ªõi c√°i vote ƒë√£ t·ª´ng ch·ªçn
                                           // Decrement by 1
                            poll.options[position_of_old_vote].1 -= 1;
                            // Update the ballot
                            Ok(Ballot {
                                option: vote.clone(),
                            }) //update vote m·ªõi
                        }
                        None => {
                            //ch∆∞a vote tr∆∞∆°c ƒë√≥
                            // Simply add the ballot
                            Ok(Ballot {
                                option: vote.clone(),
                            }) //update vote m·ªõi
                        }
                    }
                },
            )?;

            // Find the position of the new vote option and increment it by 1
            let position = poll //T√¨m vote m·ªõi
                .options
                .iter()
                .position(|option| option.0 == vote); // .position : t√¨m ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n th·ªèa m√£n ƒëi·ªÅu ki·ªán
            if position.is_none() {
                return Err(ContractError::Unauthorized {});
            }
            let position = position.unwrap();
            poll.options[position].1 += 1;

            // Save the update
            POLLS.save(deps.storage, poll_id, &poll)?;
            Ok(Response::new())
        }
        None => Err(ContractError::Unauthorized {}), // The poll does not exist so we just error
    }
}

fn execute_create_poll(
    deps: DepsMut,
    _env: Env,
    info: MessageInfo,
    poll_id: String,
    question: String,
    options: Vec<String>,
) -> Result<Response, ContractError> {
    if options.len() > 10 {
        return Err(ContractError::TooManyOptions {});
    }

    let mut opts: Vec<(String, u64)> = vec![];
    for option in options {
        opts.push((option, 0));
    }

    let poll = Poll {
        creator: info.sender,
        question,
        options: opts,
    };

    POLLS.save(deps.storage, poll_id, &poll)?;

    Ok(Response::new())
}

#[cfg_attr(not(feature = "library"), entry_point)]
pub fn query(_deps: Deps, _env: Env, _msg: QueryMsg) -> StdResult<Binary> {
    match _msg {
        QueryMsg::AllPoll {} => query_all_polls(_deps, _env),
        QueryMsg::Poll { poll_id } => query_poll(_deps, _env, poll_id),
        QueryMsg::Vote { poll_id, address } => query_vote(_deps, _env, address, poll_id),
    }
    //unimplemented!()
}

fn query_all_polls(deps: Deps, _env: Env) -> StdResult<Binary> {
    let polls = POLLS
        .range(deps.storage, None, None, Order::Ascending)
        .map(|p| Ok(p?.1))
        .collect::<StdResult<Vec<_>>>()?;

    // ƒëo·∫°n tr√™n t∆∞∆°ng ƒë∆∞∆°ng
    // let polls_iter = POLLS
    //     .range(deps.storage, None, None, Order::Ascending)
    //     .map(|p| Ok(p?.1));
    // let polls: StdResult<Vec<_>> = polls_iter.collect(); // Ch·ªâ th·ª±c thi t·∫°i ƒë√¢y
    // -> ch∆∞a unwrap
    // let polls: Vec<_> = polls_iter.collect()?; // Unwrap ra Vec, n·∫øu c√≥ l·ªói s·∫Ω tr·∫£ v·ªÅ l·ªói ngay l·∫≠p t·ª©c

    // POLLS.range(...): Tr·∫£ v·ªÅ m·ªôt iterator ch·ª©a t·ª´ng m·ª•c (key, value) trong storage.
    // None, None: Kh√¥ng c√≥ gi·ªõi h·∫°n d∆∞·ªõi v√† tr√™n ‚Üí l·∫•y to√†n b·ªô d·ªØ li·ªáu.
    // Order::Ascending: L·∫•y d·ªØ li·ªáu theo th·ª© t·ª± tƒÉng d·∫ßn c·ªßa key.

    // .map(|p| Ok(p?.1))
    //  p l√† m·ªôt Result<(Key, Value), StdError>. Do .range() khi d√πng v·ªõi storage tr·∫£ v·ªÅ iterator ch·ª©a ph·∫ßn t·ª≠ Result<(key, value), StdError>
    //  p?: N·∫øu p l√† Err, tho√°t kh·ªèi h√†m v√† tr·∫£ l·ªói.
    // .1: L·∫•y ph·∫ßn Value (b·ªè qua Key)

    // .collect::<StdResult<Vec<_>>>()?
    // M·ª•c ti√™u: Chuy·ªÉn iterator th√†nh Vec<Value>, nh∆∞ng v·∫´n gi·ªØ l·ªói n·∫øu c√≥. l∆∞u c√°c value v√†o Vec
    // StdResult<Vec<_>>:
    // Ok(Vec<Value>) n·∫øu t·∫•t c·∫£ ph·∫ßn t·ª≠ th√†nh c√¥ng.
    // Err(StdError) n·∫øu c√≥ l·ªói.
    // ?: N·∫øu c√≥ l·ªói, d·ª´ng v√† tr·∫£ l·ªói ngay l·∫≠p t·ª©c.

    to_binary(&AllPollsResponse { polls })
}

fn query_poll(deps: Deps, env: Env, poll_id: String) -> StdResult<Binary> {
    let poll = POLLS.may_load(deps.storage, poll_id)?;

    to_binary(&PollResponse { poll })
    //unimplemented!()
}

fn query_vote(deps: Deps, env: Env, address: String, poll_id: String) -> StdResult<Binary> {
    let validated_address = deps.api.addr_validate(&address)?;
    let vote = BALLOTS.may_load(deps.storage, (validated_address, poll_id))?;
    to_binary(&VoteResponse { vote })
    //unimplemented!();
}

#[cfg_attr(not(feature = "library"), entry_point)]
pub fn migrate(_deps: DepsMut, _env: Env, _msg: MigrateMsg) -> Result<Response, ContractError> {
    unimplemented!()
}

#[cfg(test)]
mod tests {
    use cosmwasm_std::{attr, from_binary};
    //module attr, helper mod
    //t·∫°o v√† s·ª≠ d·ª•ng c√°c thu·ªôc t√≠nh(attributes)
    // e.g. : ("action", "instantiate")

    use cosmwasm_std::testing::{mock_dependencies, mock_env, mock_info};
    //c√°c h√†m gi·∫£ l·∫≠p (mock function to mock an envirionment, message info, dependencies)
    //mock_dependencies t·∫°o ra m·ªôt ƒë·ªëi t∆∞·ª£ng gi·∫£ l·∫≠p cho c√°c Deps trong m√¥i tr∆∞·ªùng CosmWasm. N√≥ bao g·ªìm c√°c ph·∫ßn nh∆∞ b·ªô l∆∞u tr·ªØ (storage), API, v√† querier m√† h·ª£p ƒë·ªìng s·∫Ω s·ª≠ d·ª•ng. ƒêi·ªÅu n√†y gi√∫p b·∫°n ki·ªÉm tra c√°c h√†nh ƒë·ªông nh∆∞ ghi d·ªØ li·ªáu v√†o b·ªô l∆∞u tr·ªØ m√† kh√¥ng c·∫ßn m·ªôt blockchain th·∫≠t.
    //mock_env t·∫°o ra m·ªôt ƒë·ªëi t∆∞·ª£ng gi·∫£ l·∫≠p cho m√¥i tr∆∞·ªùng (Env) m√† h·ª£p ƒë·ªìng th√¥ng minh ch·∫°y trong ƒë√≥. N√≥ bao g·ªìm c√°c th√¥ng tin nh∆∞ th·ªùi gian, ƒë·ªãa ch·ªâ c·ªßa ng∆∞·ªùi g·ªçi, v√† c√°c y·∫øu t·ªë kh√°c li√™n quan ƒë·∫øn m√¥i tr∆∞·ªùng th·ª±c thi.
    //mock_info gi√∫p t·∫°o ra th√¥ng tin gi·∫£ l·∫≠p cho MessageInfo, bao g·ªìm ƒë·ªãa ch·ªâ ng∆∞·ªùi g·ªçi v√† c√°c ti·ªÅn t·ªá g·ª≠i k√®m (n·∫øu c√≥). ƒê√¢y l√† ƒë·ªëi t∆∞·ª£ng ch·ª©a c√°c th√¥ng tin v·ªÅ ng∆∞·ªùi g·ª≠i giao d·ªãch

    use crate::contract::{execute, instantiate}; // h√†m init c·ªßa contract
    use crate::msg::{
        AllPollsResponse, ExecuteMsg, InstantiateMsg, PollResponse, QueryMsg, VoteResponse,
    };

    use super::query; //

    //c√°c account gi·∫£ l·∫≠p
    pub const ADDR1: &str = "cosmos1g84934fjawef9w4vl4um68mjhuhlx5xstt0whp";
    pub const ADDR2: &str = "addr2";

    #[test]
    fn test_query_all_polls() {
        let mut deps = mock_dependencies();
        let env = mock_env();
        let info = mock_info(ADDR1, &vec![]);

        let msg = InstantiateMsg { admin: None };
        let res = instantiate(deps.as_mut(), env.clone(), info.clone(), msg);

        let msg = ExecuteMsg::CreatePoll {
            poll_id: "some_id_1".to_string(),
            question: "jdksjkkdj".to_string(),
            options: vec![
                "Cosmos Hub".to_string(),
                "Juno".to_string(),
                "Osmosis".to_string(),
            ],
        };
        let res = execute(deps.as_mut(), env.clone(), info.clone(), msg).unwrap();

        let msg = ExecuteMsg::CreatePoll {
            poll_id: "some_id_2".to_string(),
            question: "What's your colour?".to_string(),
            options: vec!["Red".to_string(), "Green".to_string(), "Blue".to_string()],
        };
        let _res = execute(deps.as_mut(), env.clone(), info, msg).unwrap();

        let msg = QueryMsg::AllPoll {};
        let bin = query(deps.as_ref(), env, msg).unwrap();
        let res: AllPollsResponse = from_binary(&bin).unwrap();

        assert_eq!(res.polls.len(), 2);
    }

    #[test]
    fn test_query_poll() {
        let mut deps = mock_dependencies();
        let env = mock_env();
        let info = mock_info(ADDR1, &vec![]);
        // Instantiate the contract
        let msg = InstantiateMsg { admin: None };
        let _res = instantiate(deps.as_mut(), env.clone(), info.clone(), msg).unwrap();

        // Create a poll
        let msg = ExecuteMsg::CreatePoll {
            poll_id: "some_id_1".to_string(),
            question: "What's your favourite Cosmos coin?".to_string(),
            options: vec![
                "Cosmos Hub".to_string(),
                "Juno".to_string(),
                "Osmosis".to_string(),
            ],
        };
        let _res = execute(deps.as_mut(), env.clone(), info.clone(), msg).unwrap();

        // Query for the poll that exists
        let msg = QueryMsg::Poll {
            poll_id: "some_id_1".to_string(),
        };
        let bin = query(deps.as_ref(), env.clone(), msg).unwrap();
        let res: PollResponse = from_binary(&bin).unwrap();
        // Expect a poll
        assert!(res.poll.is_some());

        // Query for the poll that does not exists
        let msg = QueryMsg::Poll {
            poll_id: "some_id_not_exist".to_string(),
        };
        let bin = query(deps.as_ref(), env.clone(), msg).unwrap();
        let res: PollResponse = from_binary(&bin).unwrap();
        // Expect none
        assert!(res.poll.is_none());
    }

    // Previous code omitted
    #[test]
    fn test_query_vote() {
        let mut deps = mock_dependencies();
        let env = mock_env();
        let info = mock_info(ADDR1, &vec![]);
        // Instantiate the contract
        let msg = InstantiateMsg { admin: None };
        let _res = instantiate(deps.as_mut(), env.clone(), info.clone(), msg).unwrap();

        // Create a poll
        let msg = ExecuteMsg::CreatePoll {
            poll_id: "some_id_1".to_string(),
            question: "What's your favourite Cosmos coin?".to_string(),
            options: vec![
                "Cosmos Hub".to_string(),
                "Juno".to_string(),
                "Osmosis".to_string(),
            ],
        };
        let _res = execute(deps.as_mut(), env.clone(), info.clone(), msg).unwrap();

        // Create a vote
        let msg = ExecuteMsg::Vote {
            poll_id: "some_id_1".to_string(),
            vote: "Juno".to_string(),
        };
        let _res = execute(deps.as_mut(), env.clone(), info.clone(), msg).unwrap();

        // Query for a vote that exists
        let msg = QueryMsg::Vote {
            poll_id: "some_id_1".to_string(),
            address: ADDR1.to_string(),
        };
        let bin = query(deps.as_ref(), env.clone(), msg).unwrap();
        let res: VoteResponse = from_binary(&bin).unwrap();
        // Expect the vote to exist
        assert!(res.vote.is_some());

        // Query for a vote that does not exists
        let msg = QueryMsg::Vote {
            poll_id: "some_id_2".to_string(),
            address: ADDR2.to_string(),
        };
        let bin = query(deps.as_ref(), env, msg).unwrap();
        let res: VoteResponse = from_binary(&bin).unwrap();
        // Expect the vote to not exist
        assert!(res.vote.is_none());
    }
    // Following code omitted

    #[test]
    fn test_instantiate() {
        //eprintln!("{} √ÇSSSASAS", Addr::unchecked(ADDR1));
        let mut deps = mock_dependencies();
        //Mock the dependencies

        let env = mock_env();
        //MOck the contract environment

        let info = mock_info(ADDR1, &vec![]);
        //Mock the message info

        let msg = InstantiateMsg { admin: None };
        //T·∫°o message khi mu·ªën ƒë·∫∑t admin l√† ng∆∞·ªùi g·ªçi

        ///eprintln!("hello1");
        let res = instantiate(deps.as_mut(), env, info, msg).unwrap();
        //deps.as_mut() -> l·∫•y mutable reference c·ªßa DepMut.
        //.unwrap() -> gi·∫£i n√©n k·∫øt qu·∫£ ki·ªÉu Result -> s·∫Ω panic n·∫øu c√≥ l·ªói

        assert_eq!(
            res.attributes,
            vec![attr("action", "instantiate"), attr("admin", ADDR1)]
        );
        //trong Response c·ªßa Cosmwasm c√≥ tr∆∞·ªùng attributes l√† Vec<Attribute>
    }

    #[test]
    fn test_instantiate_with_admin() {
        let mut deps = mock_dependencies();
        let env = mock_env();
        let msg = InstantiateMsg {
            admin: Some(ADDR2.to_string()),
        };
        let info = mock_info(ADDR1, &vec![]);

        let res = instantiate(deps.as_mut(), env, info, msg).unwrap();

        assert_eq!(
            res.attributes,
            vec![attr("action", "instantiate"), attr("admin", ADDR2)],
        );
    }

    #[test]
    fn test_execute_create_poll_valid() {
        let mut deps = mock_dependencies();
        let env = mock_env();
        let info = mock_info(ADDR1, &vec![]);

        let msg = InstantiateMsg { admin: None };
        let res = instantiate(deps.as_mut(), env.clone(), info.clone(), msg).unwrap();

        let msg = ExecuteMsg::CreatePoll {
            poll_id: "some_id".to_string(),
            question: "What's your favourite cosmos coin?".to_string(),
            options: vec![
                "Cosmos hub".to_string(),
                "Juno".to_string(),
                "Osmosis".to_string(),
            ],
        };
        let res = execute(deps.as_mut(), env, info, msg).unwrap();
    }

    #[test]
    fn test_execute_create_poll_invalid() {
        let mut deps = mock_dependencies();
        let env = mock_env();
        let info = mock_info(ADDR1, &vec![]);

        let msg = InstantiateMsg { admin: None };
        let res = instantiate(deps.as_mut(), env.clone(), info.clone(), msg).unwrap();

        let msg = ExecuteMsg::CreatePoll {
            poll_id: "some_id".to_string(),
            question: "What's your favourite number?".to_string(),
            options: vec![
                "1".to_string(),
                "2".to_string(),
                "3".to_string(),
                "4".to_string(),
                "5".to_string(),
                "6".to_string(),
                "7".to_string(),
                "8".to_string(),
                "9".to_string(),
                "10".to_string(),
                "11".to_string(),
            ],
        };

        let err = execute(deps.as_mut(), env, info, msg).unwrap_err();
        //unwrap_err(): l·∫•y gi√° tr·ªã l·ªói E t·ª´ Result<T,E> -> n·∫øu k·∫øt qu·∫£ tr·∫£ v·ªÅ Ok(T) -> panic
    }

    #[test]
    fn test_execute_vote_valid() {
        let mut deps = mock_dependencies();
        let env = mock_env();
        let info = mock_info(ADDR1, &vec![]);

        let msg = InstantiateMsg { admin: None };
        let res = instantiate(deps.as_mut(), env.clone(), info.clone(), msg).unwrap();

        //t·∫°o poll
        let msg = ExecuteMsg::CreatePoll {
            poll_id: "some_id".to_string(),
            question: "What's your favourite Cosmos coin?".to_string(),
            options: vec![
                "Cosmos Hub".to_string(),
                "Juno".to_string(),
                "Osmosis".to_string(),
            ],
        };
        let _res = execute(deps.as_mut(), env.clone(), info.clone(), msg).unwrap();

        //vote l·∫ßn ƒë·∫ßu
        let msg = ExecuteMsg::Vote {
            poll_id: "some_id".to_string(),
            vote: "Juno".to_string(),
        };
        let _res = execute(deps.as_mut(), env.clone(), info.clone(), msg).unwrap();

        //ƒë·ªïi vote
        let msg = ExecuteMsg::Vote {
            poll_id: "some_id".to_string(),
            vote: "Osmosis".to_string(),
        };
        let _res = execute(deps.as_mut(), env, info, msg).unwrap();
    }

    #[test]
    fn test_execute_vote_invalid() {
        let mut deps = mock_dependencies();
        let env = mock_env();
        let info = mock_info(ADDR1, &vec![]);

        let msg = InstantiateMsg { admin: None };
        let res = instantiate(deps.as_mut(), env.clone(), info.clone(), msg).unwrap();

        let msg = ExecuteMsg::Vote {
            // t·∫°o vote nh∆∞ng poll_id ch∆∞a c√≥
            poll_id: "some_id".to_string(),
            vote: "Juno".to_string(),
        };

        //test error
        let _err = execute(deps.as_mut(), env.clone(), info.clone(), msg).unwrap_err();
        eprintln!("invalid vote {}", _err);

        //t·∫°o poll
        let msg = ExecuteMsg::CreatePoll {
            poll_id: "some_id".to_string(),
            question: "What's your favourite Cosmos coin?".to_string(),
            options: vec![
                "Cosmos Hub".to_string(),
                "Juno".to_string(),
                "Osmosis".to_string(),
            ],
        };
        let _res = execute(deps.as_mut(), env.clone(), info.clone(), msg).unwrap();

        //t·∫°o vote kh√¥ng h·ª£p l·ªá
        let msg = ExecuteMsg::Vote {
            poll_id: "some_id".to_string(),
            vote: "DVPN".to_string(),
        };
        let _err = execute(deps.as_mut(), env, info, msg).unwrap_err();
    }
}

//.as_mut() trong Rust ƒë∆∞·ª£c d√πng ƒë·ªÉ chuy·ªÉn m·ªôt Option<T> ho·∫∑c Result<T, E> th√†nh m·ªôt tham chi·∫øu mutable (&mut T) n·∫øu c√≥ gi√° tr·ªã Some(T) ho·∫∑c Ok(T), c√≤n n·∫øu l√† None ho·∫∑c Err(E), n√≥ tr·∫£ v·ªÅ None.

/*#[cfg(not(feature = "library"))]
use cosmwasm_std::entry_point;
use cosmwasm_std::{Binary, Deps, DepsMut, Env, MessageInfo, Response, StdResult};
// use cw2::set_contract_version;

use crate::error::ContractError;
use crate::msg::{ExecuteMsg, InstantiateMsg, QueryMsg};

/*
// version info for migration info
const CONTRACT_NAME: &str = "crates.io:cw-starter";
const CONTRACT_VERSION: &str = env!("CARGO_PKG_VERSION");
*/

#[cfg_attr(not(feature = "library"), entry_point)]
pub fn instantiate(
    _deps: DepsMut,
    _env: Env,
    _info: MessageInfo,
    _msg: InstantiateMsg,
) -> Result<Response, ContractError> {
    unimplemented!()
}

#[cfg_attr(not(feature = "library"), entry_point)]
pub fn execute(
    _deps: DepsMut,
    _env: Env,
    _info: MessageInfo,
    _msg: ExecuteMsg,
) -> Result<Response, ContractError> {
    unimplemented!()
}

#[cfg_attr(not(feature = "library"), entry_point)]
pub fn query(_deps: Deps, _env: Env, _msg: QueryMsg) -> StdResult<Binary> {
    unimplemented!()
}

#[cfg(test)]
mod tests {}*/
